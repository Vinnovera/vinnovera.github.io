<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vinnovera]]></title>
  <link href="http://vinnovera.se/atom.xml" rel="self"/>
  <link href="http://vinnovera.se/"/>
  <updated>2014-09-24T15:31:37+02:00</updated>
  <id>http://vinnovera.se/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Frontend-lunch på Vinnovera]]></title>
    <link href="http://vinnovera.se/blogg/2014/09/23/frontend-lunch-pa-vinnovera/"/>
    <updated>2014-09-23T10:27:15+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/09/23/frontend-lunch-pa-vinnovera</id>
    <content type="html"><![CDATA[<p>Man brukar ju säga att alla behöver äta lunch&hellip; Lunch har därför blivit ett bra tillfälle för alla oss på Vinnovera att samlas och prata ny teknik, delar erfarenheter och visa egna projekt.<!--more--> Vi brukar gå igenom, diskutera och sammanställa länkar som sedan blir till vår artikelserie <a href="http://vinnovera.se/blogg/tagg/hittat/">&ldquo;Hittat på nätet&rdquo;</a>. Utöver det blir det ofta workshop kring något ämne som berör det vi jobbar med dagligen eller demo av egna projekt. Vi har under året bland annat pratat om <a href="http://vinnovera.se/blogg/2013/12/12/unit-testing/">&ldquo;Unit testing&rdquo;</a>, <a href="http://vinnovera.se/blogg/2014/02/19/garbage-collection/">&ldquo;Garbage collection&rdquo;</a>, <a href="http://vinnovera.se/blogg/2014/01/07/jquery-vs-mootools/">&ldquo;MooTools&rdquo;</a> och <a href="http://vinnovera.se/blogg/2013/12/13/bildmanipulering-i-javascript/">&ldquo;Bildmanipulation&rdquo;</a> som sedan resulterat i artiklar här på bloggen. Luncherna har också blivit födelseplatsen och/eller katalysator för flera roliga projekt. T.ex. en responsiv lightbox (<a href="https://github.com/Vinnovera/jsOverlay">&ldquo;jsOverlay&rdquo;</a>), ett spel med Node.js och MongoDB, utvecklingsramverket <a href="https://github.com/Vinnovera/estrad">Estrad</a>, en lösning för responsiva bilder (<a href="https://github.com/Vinnovera/rimd">Rimd</a>) och mycket mer.</p>

<p><img src="http://vinnovera.se/images/content/posts/frontend-lunch-pa-vinnovera/lunch.jpg" alt="Lunch" /></p>

<p>Och till på köpet får man mat i magen!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hittat på nätet #6]]></title>
    <link href="http://vinnovera.se/blogg/2014/09/01/hittat-pa-natet-number-6/"/>
    <updated>2014-09-01T10:27:15+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/09/01/hittat-pa-natet-number-6</id>
    <content type="html"><![CDATA[<p>En sommar full med JavaScript, musik, verktyg, ramverk och folk som byter åsikter!</p>

<!--more-->


<h2>Simpelt byggda med få element</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-6/singlediv.jpg" alt="A Single Div" />
<a href="http://a.singlediv.com/">A Single Div</a><br/>
<a href="http://nicolasgallagher.com/pure-css-gui-icons/demo/#non">Pure CSS GUI icons</a><br/>
Två exempel på vad man kan åstakomma med minimal kod.</p>

<h2>Patterns för stora JavaScript-applikationer</h2>

<p><a href="http://addyosmani.com/largescalejavascript/">Patterns For Large-Scale JavaScript Application Architecture</a><br/>
Ett förslag på hur man kan bygga upp sin app-struktur med hjälp av moduler, mediator och fasader.</p>

<h2>Åsikter om JS-ramverk</h2>

<p><a href="http://blog.andyet.com/2014/08/13/opinionated-rundown-of-js-frameworks">Opinionated Rundown of JS Frameworks</a><br/>
Henrik Joreteg går igenom för- och nackdelar med några populära JavaScript-ramverk för att sedan fronta deras egna ramverk Ampersand.</p>

<h2>Service Worker</h2>

<p><a href="http://jakearchibald.com/2014/service-worker-first-draft/">Service Worker &ndash; first draft published</a><br/>
Google, Samsung, Mozilla m.fl. har arbetat tillsammans för att utveckla &ldquo;Service Worker&rdquo; som bl.a. gör det möjligt att köra skript innan en sida existerar. Det gör det möjligt att skapa mer applikationslika webbsidor.</p>

<h2>r2d3</h2>

<p><a href="https://github.com/mhemesath/r2d3/">r2d3</a>  <br/>
IE8 är kanske inte vår favoritwebbläsare, men nu har vi iallafall bättre möjligheter att jobba med datavisualisering där också.</p>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-6/IEvsMurderrate.jpg" alt="IE vs Murder rate" /><br/>
Fler spännande korrelationer: <a href="http://tylervigen.com/">Spurious Correlations</a></p>

<h2>smallworld.js</h2>

<p><a href="http://mikefowler.me/smallworld.js/">smallworld.js</a><br/>
smallworld.js skapades för att fylla tomrummet att kunna rendera en enkel kartöversikt utan tunga bibliotek.</p>

<h2>ish. 2.0</h2>

<p><a href="http://bradfrostweb.com/demo/ish/">ish. 2.0</a><br/>
Verktyg för att testa webbsidor i alla storlekar.
<img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-6/ish-manual.gif" alt="ish manual" /></p>

<h2>Apfy me</h2>

<p><a href="http://www.apfy.me/">apfy.me</a><br/>
1. Hämta en sida och få HTML-svaret som XML<br/>
2. Formatera XML output:en med XSLT<br/>
3. Validera output med XSD<br/>
4. Spara ner som ett API när du är klar!</p>

<h2>Hejdå Node.js</h2>

<p><a href="https://medium.com/code-adventures/farewell-node-js-4ba9e7f3e52b">Farewell Node.js</a><br/>
TJ Holowaychuk lämnar Node.js för att gå över till &ldquo;Go&rdquo; som passar hans nuvarande programmeringsambitioner bättre.</p>

<h2>Prezi har gått över till Javascript</h2>

<p><a href="https://medium.com/prezi-engineering/how-and-why-prezi-turned-to-javascript-56e0ca57d135">How and why Prezi turned to JavaScript</a><br/>
En artikel om varför Prezi gick över till JavaScript och vilket jättejobb det innebar för dem.</p>

<h2>Säkrast går först!</h2>

<p><a href="http://thenextweb.com/google/2014/08/07/google-is-now-ranking-websites-with-https-higher-in-its-search-results/">Google is now ranking websites with HTTPS higher in its search results</a><br/>
Google rankar nu sidor med HTTPS högre i sökresultaten.</p>

<h2>Räkna BPM med Javascript och Spotify</h2>

<p><a href="http://jmperezperez.com/beats-audio-api/">beats-audio-api</a><br/>
1. Leta fram en låt på Spotify med hjälp av deras Web API<br/>
2. Använd den 30 sekunders långa MP3-förhandsgranskningen som source från Audio API:et<br/>
3. Lägg på ett lowbass filter<br/>
4. Hitta toppar<br/>
5. Räkna intervallet mellan toppar<br/>
6. Gruppera dom</p>

<h2>Lite mer datavisualisering</h2>

<p>Fler excellenta exempel på hur data kan representeras mer eller mindre förståeligt och korrekt.</p>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-6/rabbitduck.jpg" alt="rabbit or duck or both" /></p>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-6/jsbok.jpg" alt="javascript-böcker" /></p>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-6/procent.jpg" alt="rabbit or duck or both" /></p>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-6/ie.jpg" alt="IE as bicycles" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hej Harald och Mico!]]></title>
    <link href="http://vinnovera.se/blogg/2014/09/01/hej-harald-och-mico/"/>
    <updated>2014-09-01T10:27:15+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/09/01/hej-harald-och-mico</id>
    <content type="html"><![CDATA[<p><strong>Harald</strong> och <strong>Mico</strong> började i augusti som frontend-utvecklare på Vinnovera. Kul tycker vi!<!--more--></p>

<p><img src="http://vinnovera.se/images/profiles/harald.jpg" alt="Harald" class="portrait" />
<strong>Harald</strong> har mångårig erfarenhet av interaktiva spel och lärohjälpmedel. På senare år har fokus legat på webbgränssnitt och frontend-utveckling. Med dessa kunskaper har Harald god förståelse för såväl interaktion och grafiska gränssnitt, samt hur man utvecklar dessa rent tekniskt. Utöver sin kärlek till frontend har han en musikstudio på söder där bland annat hans triphop-projekt &ldquo;Skuld&rdquo; håller hus.</p>

<p><img src="http://vinnovera.se/images/profiles/michael.jpg" alt="Michael" class="portrait" />
<strong>Michael a.k.a. Mico</strong> har jobbat med webbutveckling sedan 1997 och har stor erfarenhet och kunskap av alla beståndsdelar i ett webbprojekt, från backend till frontend. Han har bland mycket annat startat och drivit hosting-företaget MrFriday. Frontend är dock det som ligger honom varmast om hjärtat. Mico driver även tidskriften &ldquo;Hilfe&rdquo; och reser till Japan så fort han får möjlighet.
<strong>Stockholmsmässan</strong> under hösten och Mico kommer att jobba med <strong>A/B-test</strong> åt en av våra hemliga kunder.</p>

<p><strong>Väääälkomna!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frontend för KitchenTime]]></title>
    <link href="http://vinnovera.se/blogg/2014/08/04/kitchen-time/"/>
    <updated>2014-08-04T10:27:15+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/08/04/kitchen-time</id>
    <content type="html"><![CDATA[<p>Vår partner <strong><a href="http://www.enferno.se/">Enferno</a></strong> bad oss om hjälp med frontend-utveckling för deras kund <strong><a href="http://kitchentime.se/">KitchenTime</a></strong>.<!--more--> Enferno utvecklar e-handelsplattformen <strong>&ldquo;Storm&rdquo;</strong> som ger bra förutsättningar för arbete med frontend,  och vi har tidigare byggt <strong><a href="http://vinnovera.se/projekt/dackia">Däckia.se</a></strong> tillsammans med dem. Ingen tvekan om att vi ville hjälpa till alltså!
<img src="http://vinnovera.se/images/content/posts/kitchen-time/screenshot-desktop.png" alt="Desktop" />
<strong>Sandra</strong> hos oss byggde större delen av mallsidorna och resultatet blev en responsiv e-handel, utvecklad på kort tid och med gott resultat. Så är du ute efter kvalitetsprodukter för köket är det bara att surfa in på <strong><a href="http://kitchentime.se/">www.kitchentime.se</a></strong>
<img src="http://vinnovera.se/images/content/posts/kitchen-time/screenshot-mobile.png" alt="Mobile" />
Tack <strong>Enferno</strong> och <strong>KitchenTime</strong> för gott samarbete!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hittat på nätet #5]]></title>
    <link href="http://vinnovera.se/blogg/2014/07/04/hittat-pa-natet-number-5/"/>
    <updated>2014-07-04T14:01:25+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/07/04/hittat-pa-natet-number-5</id>
    <content type="html"><![CDATA[<p>Bland avancerad CSS och D3, också, varför är internet fult i Norge?</p>

<!--more-->


<h2>Kul med CSS</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-5/808cube.jpg" alt="808 Cube" />
<a href="http://808cube.com/">808 Cube</a><br/>
En mashup av Rolands ikoniska trummaskinen TR-808 och Rubiks kub. 808 Cube är gjort med CSS 3D och Web Audio API.</p>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-5/trigometry.jpg" alt="Icosidodecahedron" />
<a href="http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass">Inverse trigonometric functions with Sass</a><br/>
Jag kan inte stött på en situation då jag behövt använda sekans, cosekans eller cotangens i Sass. Men när den dagen kommer har den fantastiska Ana Tudor lösningen.</p>

<h2>Hur stor är en glyph?</h2>

<p>I ett projekt behövde vi linjera textrader av olika textstorlekar med varandra i en SVG. Varje bokstav ligger i en box med tomrum runt själva glyphen, och det är de boxarna som linjeras med varandra. För att lösa problemet behövde vi lista ut tomrummet runt varje glyph.</p>

<p><a href="http://www.jasondavies.com/wordcloud/about/">How the Word Cloud Generator Works</a><br/>
För att undvika textkollisioner i ett ordmoln skrivs texten ut i ett dolt canvas-element där pixel-data räknas ut.</p>

<p><a href="http://nodebox.github.io/opentype.js/index.html">opentype.js</a><br/>
Opentype.js ger dig däremot direkt tillgång till glyphen och låter dig till och med modifiera dom.</p>

<h2>Grävande journalistik från DN Kultur</h2>

<p><a href="http://www.dn.se/kultur-noje/varfor-ar-internet-i-norge-kjempefult/">Varför är Internet i Norge kjempefult?</a><br/>
Jag vill påpeka att vi inte nödvändigtvis håller med, men intressant läsning ändå.</p>

<h2>Bra att ha</h2>

<p><a href="http://css-tricks.com/prefilling-forms-custom-bookmarklet/">Prefilling Forms with a Custom Bookmarklet</a><br/>
Alla användare heter inte Asd Asdfgh och har mailadressen <a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#97;&#115;&#100;&#x40;&#x61;&#x73;&#100;&#x2e;&#x61;&#x73;&#46;">&#x61;&#x73;&#100;&#x40;&#97;&#115;&#x64;&#46;&#x61;&#x73;&#46;</a> Det är inte heller kul att skriva det varje gång du ska testa ett formulär.</p>

<p><a href="http://usesparingly.tumblr.com/">Use sparingly</a><br/>
Det är inte alltid lätt att hänga med i jargongen. Use sparingly är en användbar fusklapp.</p>

<p><a href="https://github.com/blog/1845-psd-viewing-diffing">PSD Viewing &amp; Diffing</a><br/>
GitHub stödjer nu visning och diffning av PSD-filer.</p>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-5/w6ehv.png" alt="Faraday cage" /><br/>
<a href="http://stackoverflow.com/questions/4808433/is-it-possible-to-disable-the-network-in-ios-simulator/13831212#13831212">Is it possible to disable the network in iOS Simulator?</a><br/>
Responsiv webb handlar inte bara om skalbara div:ar och bilder. Kanske lika viktigt är det att ta hänsyn till användarens uppkoppling. Användare har sällan lika bra anslutning i mobilen på bussen som på kontoret.</p>

<h3>General Update Pattern i D3</h3>

<p>Patterns som borde vara obligatoriska när du använder D3.js</p>

<ul>
<li><a href="http://bl.ocks.org/mbostock/3808218">Pattern 1</a></li>
<li><a href="http://bl.ocks.org/mbostock/3808221">Pattern 2</a></li>
<li><a href="http://bl.ocks.org/mbostock/3808234">Pattern 3</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hej Daniel!]]></title>
    <link href="http://vinnovera.se/blogg/2014/06/30/hej-daniel/"/>
    <updated>2014-06-30T10:27:15+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/06/30/hej-daniel</id>
    <content type="html"><![CDATA[<p><img src="http://vinnovera.se/images/profiles/daniel.jpg" alt="Daniel" class="portrait" />
Under våren har det varit fullt ös på Vinnovera och vi kände att det var dags få in ytterligare en duktig frontend-utvecklare<!--more-->, gärna med fokus på applikationsutveckling med JavaScript. Som genom ett trollslag hörde <strong>Daniel</strong> av sig och vi fann varandra. Han är en kreativ problemlösare med stor passion och nyfikenhet för nya tekniker. När Daniel inte kodar komplexa <strong>webb-applikationer</strong> gillar han att baka surdegsbröd (som man vid väl valda tillfällen kan få smaka på kontoret) och vässa sitt löpsteg.</p>

<p>Daniel började hos oss i juni och kommer att jobba med ett stort applikationsprojekt åt en av våra hemliga kunder.</p>

<p><strong>Väääälkommen!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackathon på Skåvsjöholm]]></title>
    <link href="http://vinnovera.se/blogg/2014/06/30/hackathon-pa-skavsjoholm/"/>
    <updated>2014-06-30T10:27:15+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/06/30/hackathon-pa-skavsjoholm</id>
    <content type="html"><![CDATA[<p>För ett trevligt miljöombyte åkte hela Vinnovera ut till Skåvsjöholm för två dagars hackathon, workshop och umgänge.<!--more--> Efter en kort resa checkade vi in, fick ett eget hus med sjöutsikt och packade upp våra laptops. En stor del av tiden lades på arbete med egna projekt och teknikutforskning. Det innebar bland annat partiklar med <strong>D3.js</strong>, vidareutveckling av <strong><a href="https://github.com/Vinnovera/estrad">Estrad</a></strong>, en <strong>scoreboard</strong>-app, utforskning av <strong>API:er för kollektivtrafik</strong> och <strong>isometrisk 3D</strong> med JavaScript.</p>

<p><img src="http://vinnovera.se/images/content/posts/hackathon-pa-skavsjoholm/hacking.jpg" alt="Hacking" /></p>

<p>Vi gick även igenom alla kundprojekt som är igång för att sprida kunskap, inspirera och bolla lösningar. Det är bra och lärorikt att ibland påminna sig om alla delar vi levererar till våra kunder &ndash; Allt från teknisk strategi och arkitektur till frontend-utveckling och utbildning.</p>

<p><img src="http://vinnovera.se/images/content/posts/hackathon-pa-skavsjoholm/workshop.jpg" alt="Workshop" /></p>

<p>Skåvsjöholm bjöd i övrigt på god mat, biljard, boule och bubbelbad. Det blev helt enkelt två trevliga, inspirerande och avslappnande dagar i skärgården!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hittat på nätet #4]]></title>
    <link href="http://vinnovera.se/blogg/2014/05/09/hittat-pa-natet-number-4/"/>
    <updated>2014-05-09T14:01:25+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/05/09/hittat-pa-natet-number-4</id>
    <content type="html"><![CDATA[<p>Senaste länkspaningarna, den här gången med Photoshoputmanare, obskyra CSS-fakta, och såklart lite SVG</p>

<!--more-->


<h2>Istället för Photoshop</h2>

<p>Inte sällan känns det fullständiga Photoshop som en smula omständigt och klumpigt när det kommer till att bygga webbplatser utifrån Photoshop-skisser. Vi ser här ett par lösningar som är menade att underlätta det arbetet.
<img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-4/parfait.png" alt="Project Parfait" />
<a href="https://projectparfait.adobe.com/">Project Parfait</a><br/>
Ett projekt i betastadie från Adobe själva som skall underlätta i arbetet med att ta fram CSS, mått och text från en PSD-fil.</p>

<p><a href="http://photoshopkiller.com/">Photoshop Killer</a><br/>
En reklamsajt med irritationsmoment relaterat till Photoshop med hög igenkänningsfaktor. Gör reklam för en kommande produkt, Avocode, som ser ut att göra ungefär samma saker som Project Parfait.</p>

<p><a href="http://bohemiancoding.com/sketch/">Sketch</a>
Ett alternativt designverktyg som ser ut att vara väl anpassat för många utmaningar i den moderna digitala designprocessen.</p>

<h2>URL-funderingar</h2>

<p>Hur URLer skall presenteras är en diskussion som är lite på modet just nu.</p>

<p><a href="http://jakearchibald.com/2014/improving-the-url-bar/">Improving the URL Bar</a>
Tydligare separation mellan domän och sökväg, kan det minska risken vid phishing-attacker? Och vilken del av en URL är viktigast för användaren att se egentligen?</p>

<p><a href="http://news.bbc.co.uk/1/hi/8306631.stm">Berners-Lee &lsquo;sorry&rsquo; for slashes</a>
Och så har vi den här gamla godingen där Tim Berners-Lee ber om ursäkt för //.</p>

<h2>jQuery-trollande</h2>

<p><a href="http://i.stack.imgur.com/A7NsC.gif">Add a number to another number in Javascript</a>
Det är tydligt att fler och fler börjar vända sig mot att Javascript och jQuery blivit så tätt sammankopplat. Ett typiskt exempel på detta är det här Javascript-skojandet.</p>

<h2>Isomer &ndash; En isometrisk spelmotor</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-4/isomer.png" alt="Isomer" />
<a href="http://jdan.github.io/isomer/">Isomer</a>
En spelmotor för isometriska spel som ser kul ut.</p>

<h2>Obskyra CSS-fakta</h2>

<p><a href="http://www.sitepoint.com/12-little-known-css-facts/">12 little known CSS facts</a>
Det finns en del obskyra CSS-fakta, varav några roliga finns listade här. Kolla t.ex. in nummer 5 på listan som kan vara bra att ha koll på.</p>

<h2>Arduino och matlagning</h2>

<p><a href="https://www.youtube.com/watch?v=29qBI7IWFl4">BBQDuino</a>
Ett roligt litet projekt som kombinerar Arduino och ett temperatursticka för att hjälpa till med den perfekta matlagningen.</p>

<h2>Inline SVG vs Icon Fonts</h2>

<p><a href="http://css-tricks.com/icon-fonts-vs-svg/">Inline SVG vs Icon Fonts [CAGEMATCH]</a>
En ganska grundlig jämförelse mellan SVG och icon fonts, och SVG är enklare att ha kontroll över, kantujämnar mer regelbundet och är utöver browserstöd helt överlägset.</p>

<h2>ET återfunnen</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-4/et.png" alt="ET" />
En legend som vandrat runt sedan det uråldriga 80-talet är att väldiga mängder av datorspelsfloppen ET begravts någonstans i öknen i New Mexico, och tydligen har den visat sig vara sann.</p>

<p><a href="https://www.youtube.com/watch?v=gULY34J3x0I">ET spelet</a></p>

<p><a href="https://www.youtube.com/watch?v=kGc3FMqxjaM">ET funnen</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vi söker frontend-utvecklare!]]></title>
    <link href="http://vinnovera.se/blogg/2014/04/23/vi-soker-frontend-utvecklare/"/>
    <updated>2014-04-23T09:09:34+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/04/23/vi-soker-frontend-utvecklare</id>
    <content type="html"><![CDATA[<p><img src="http://vinnovera.se/images/content/posts/vi-soker-frontend-utvecklare/logotyp.jpg" alt="Vinnovera" />
Vi letar efter dig som <strong>brinner för frontend-utveckling</strong> och vill utvecklas inom det området tillsammans med likasinnade. Du kan vara både junior som senior &ndash; <strong>oavsett arbetslivserfarenhet</strong> så har du möjlighet att utvecklas hos oss. Många projekt på GitHub väger lika tungt som ett långt CV.</p>

<!--more-->


<p>Hos oss får du jobba med <strong>responsive webb, mobilsajter, webbappar</strong> och andra skojiga saker som har ett gränssnitt på webben. Alltid med <strong>kvalitet och hantverkskänsla i fokus</strong>. Vi värdesätter att arbeta tillsammans och dela kunskap för att kunna genomföra projekt på bästa sätt.</p>

<p>Vi har ett antal stora företag som kunder (som vi tyvärr inte får nämna vid namn förrän du kommer och träffar oss) och även ett gäng mindre. Just nu jobbar vi mycket med <strong><a href="http://nodejs.org/">node.js</a></strong>, <strong><a href="http://d3js.org/">D3.js</a></strong> och <strong><a href="http://backbonejs.org/">Backbone</a></strong>.</p>

<p>Låter det intressant?<br/> Hör av dig till Björn-Olle &ndash; <a href="mailto:bjorn-olle@vinnovera.se">bjorn-olle@vinnovera.se</a>, 070-171 67 27</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hittat på nätet #3]]></title>
    <link href="http://vinnovera.se/blogg/2014/04/11/hittat-pa-natet-number-3/"/>
    <updated>2014-04-11T14:10:25+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/04/11/hittat-pa-natet-number-3</id>
    <content type="html"><![CDATA[<p>I denna upplaga: mer SVG, mer underlines, nytt programmeringsspråk, verktyg och lite historia</p>

<!--more-->


<h2>Alla vägar leder till Xerox</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-3/burger.jpg" alt="The origin of the hamburger icon" />
<a href="https://www.evernote.com/shard/s207/sh/022f2237-4b4f-4096-87f2-053acd228c2d/ede2672bc3f39a1b0232f84e01ca0a83">The origin of the hamburger icon</a><br />
Varifrån kommer alla ikoner?  Hamburgarens hitoria kan du hitta här.</p>

<h2>Kommentarsfält utöver det vanliga</h2>

<p><a href="http://lattlast.se/kommentarsfalt">Centrum för lättläst lanserar ett kommentarsfält för alla</a><br />
Centrum för lättläst lanserar &ldquo;Kommentarsfält för alla&rdquo;, som  ökar tillgängligheten för kommentarer och diskussion på nätet.</p>

<h2>Network Link Conditioner</h2>

<p><a href="http://nshipster.com/network-link-conditioner/">Network Link Conditioner</a><br />
Simulera begränsade uppkopplingar när du utvecklar.</p>

<h2>The Heartbleed Bug</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-3/heartbleed_explanation.jpg" alt="heartbleed_explanation" />
<a href="http://xkcd.com/1354/">The Heartbleed Bug</a><br /></p>

<h2>Javascript spel</h2>

<p><a href="http://alexnisnevich.github.io/untrusted/">Untrusted &ndash; a user javascript adventure game</a><br />
Ett spel som går ut på att skriva JavaScript för att ta sig vidare till nästa level.</p>

<h2>Support för Windows XP upphör</h2>

<p><a href="http://windows.microsoft.com/en-us/windows/end-support-help">Windows XP support has ended</a><br />
Efter 12 års support slutar Microsoft att ha underhåll för Windows XP. Då IE8 inte heller underhålls längre kan man utsätta sin dator för säkerhetsrisk om man fortsätter att använda produkterna.</p>

<h2>Grilla ditt moderkort</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-3/tray.jpg" alt="How I resurrected my MacBook Pro by putting it in the oven" />
<a href="http://ales.io/2014/03/09/how-to-bake-a-mac.html">How I resurrected my MacBook Pro by putting it in the oven</a><br />
Efter en &ldquo;Blue Screen of Death&rdquo; plockade Aleš Kocjančič ut sitt moderkort ur sin MacBook Pro och körde det i ugnen på 170° Celsius i 7 minuter. Magiskt nog började datorn fungera igen.</p>

<h2>doT.js</h2>

<p><a href="http://olado.github.io/doT/index.html">The fastest + concise javascript template engine for Node.js and browsers.</a><br />
En snabb och liten template-motor för node.js och browsers</p>

<h2>SVG Sprites</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-3/svg-icon.jpg" alt="How I resurrected my MacBook Pro by putting it in the oven" />
<a href="http://css-tricks.com/svg-sprites-use-better-icon-fonts/">Icon System with SVG Sprites</a><br />
Ett alternativ till icon-fonts från Chris Coyier där man använder inline SVG.</p>

<h2>Lär dig rita med ASCII</h2>

<p><a href="http://asciiflow.com/">Asciiflow &ndash; ASCII Flow Diagram Tool</a><br />
Ett fräsigt onlineverktyg där man kan rita, spara och mycket mer med hjälp av en slående ASCII-design.</p>

<h2>Utveckligen av en utvecklare</h2>

<p><a href="https://medium.com/p/db854689243">The Evolution of a Software Engineer</a><br />
Ibland kan det ta tio år att komma tillbaka till början.</p>

<h2>Vetenskapen om underlines</h2>

<p><a href="https://medium.com/p/7c03a9274f9">Crafting link underlines on Medium</a><br />
En artikel om hur en &ldquo;quick-fix&rdquo; blev ett månadslångt projekt för att fixa underlines på medium.com</p>

<h2>Hack</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-3/facebook-hack.jpg" alt="Facebook Introduces ‘Hack,’ the Programming Language of the Future" />
<a href="http://hacklang.org/">Facebook Introduces ‘Hack,’ the Programming Language of the Future</a>
Hack &ndash; ett programmeringsspråk utvecklat av de Facebook-anställda Bryan O’Sullivan, Julien Verlaguet, och Alok Menghrajani. Det används idag av Facebook som ersättare av PHP och beskrivs som ett språk som låter utvecklare snabbt bygga mjukvara utan att kompromissa på kvaliteten.</p>

<h2>Världens minsta responsiva CSS-ramverk?</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* FLUIDITY v0.1.0 @mrmrs - http://mrmrs.cc MIT</span>
</span><span class='line'><span class="c">*/</span>
</span><span class='line'><span class="c">/*</span>
</span><span class='line'><span class="c"> Responsive Utilities</span>
</span><span class='line'>
</span><span class='line'><span class="c">*/</span>
</span><span class='line'><span class="nt">img</span><span class="o">,</span> <span class="nt">canvas</span><span class="o">,</span> <span class="nt">iframe</span><span class="o">,</span> <span class="nt">video</span><span class="o">,</span> <span class="nt">svg</span> <span class="p">{</span> <span class="k">max-width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* Wrap tables or pre elements in a div with this class */</span>
</span><span class='line'><span class="nc">.overflow-container</span> <span class="p">{</span> <span class="k">overflow-y</span><span class="o">:</span> <span class="k">scroll</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/mrmrs/fluidity">A light-weight, fully-responsive css framework</a><br />
Troll eller på riktigt? Med issues som &ldquo;<a href="https://github.com/mrmrs/fluidity/issues/13">Consider adding form elements</a>&rdquo; och &ldquo;<a href="https://github.com/mrmrs/fluidity/issues/6">Specify Version of Supported Browsers</a>&rdquo; ser det väldigt autentiskt ut.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shopify - Adding meta data to a product]]></title>
    <link href="http://vinnovera.se/blogg/2014/04/07/shopify-adding-meta-data-to-a-product/"/>
    <updated>2014-04-07T10:43:38+02:00</updated>
    <id>http://vinnovera.se/blogg/2014/04/07/shopify-adding-meta-data-to-a-product</id>
    <content type="html"><![CDATA[<p>While developing a Shopify site we encountered the issue of wanting to add custom content or meta data to a product page. <!-- more -->There weren&rsquo;t any options in the product settings that matched what we wanted to achieve &ndash; adding product specific pdf-files and movies.</p>

<p>The option we found to be suggested was to use metafields, a module for Shopify, but we didn&rsquo;t want to make a big hassle of poking around in the <a href="http://www.shopify.com/technology/3032322-new-feature-metafields#axzz2xvNXkLON">Shopify API</a>.</p>

<p>Our solution? We decided to use the product tags. If we wanted to add a pdf-file to a product we added the tag <code>file:filename.pdf</code> or if we wanted to add a video we wrote <code>video:youtubeID</code>. By doing this we could with ease control what was added to each product.</p>

<p><img src="http://vinnovera.se/images/content/posts/shopify-adding-meta-data/tags.jpg" alt="" /></p>

<p>Code example for tags containing video:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% for tag in product.tags %}
</span><span class='line'>  {% if tag contains &#39;video:&#39;%}
</span><span class='line'>      <span class="nt">&lt;div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;http://www.youtube.com/embed/{{ tag | replace: &#39;video:&#39;, &#39;&#39;}}&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>{% endfor %}
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[På gång]]></title>
    <link href="http://vinnovera.se/blogg/2014/03/20/pa-gang/"/>
    <updated>2014-03-20T09:27:15+01:00</updated>
    <id>http://vinnovera.se/blogg/2014/03/20/pa-gang</id>
    <content type="html"><![CDATA[<p>Det är många roliga saker på gång hos oss under våren. <!--more-->Tyvärr får vi inte nämna alla kunder vid namn, men det är ett stort och utmanande <strong>webb-applikations</strong>-projekt på gång och vi fortsätter med <strong>e-handelsfrontend</strong> för mobil och tablet i ett annat omfattande projekt. Vi drar också igång ett nyttprojekt med <strong>Stockholmsmässan</strong> som kommer att innebära både spännande webb- och applikationsutveckling.</p>

<p>Vi kommer att bland annat att jobba med <strong>Backbone.js</strong>, <strong>D3.js</strong> och <strong>Node.js</strong>, och som vanligt med fokus på att leverera teknisk hantverk och bra användarupplevelser.</p>

<p><img src="http://vinnovera.se/images/content/posts/pa-gang/nodejs-logo.png" alt="Node.js logo" />
<img src="http://vinnovera.se/images/content/posts/pa-gang/backbone-logo.png" alt="Backbone logo" />
<img src="http://vinnovera.se/images/content/posts/pa-gang/D3-logo.png" alt="D3 logo" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hittat på nätet #2]]></title>
    <link href="http://vinnovera.se/blogg/2014/03/14/hittat-pa-natet-number-2/"/>
    <updated>2014-03-14T14:51:55+01:00</updated>
    <id>http://vinnovera.se/blogg/2014/03/14/hittat-pa-natet-number-2</id>
    <content type="html"><![CDATA[<p>Dagens tema är SVG &ndash; det bästa sedan skivat bröd.</p>

<!--more-->


<h2>Frame-by-frame animation using SVG and SMIL</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-2/svgandsmil.jpg" alt="Frame-by-frame animation using SVG and SMIL" />
<a href="http://www.joningram.co.uk/article/svg-smil-frame-animation/">Frame-by-frame animation using SVG and SMIL</a><br>
När den här artikeln skrevs fungerade SMIL animationer i SVG bara i webkit-browsers. Sedan dess har fler hunnit ikapp.</p>

<h2>Rethinking Responsive SVG</h2>

<p><a href="http://coding.smashingmagazine.com/2014/03/05/rethinking-responsive-svg/">Rethinking Responsive SVG</a><br>
Responsiva vektorbaserade ikoner som ändrar utseende beroende på tillgängligt utrymme. Det är ett av alla användningsområden för SVG-bilder. Smashing Mag går igenom några olika metoder att åstadkomma detta, till exempel ett där SVG filen innehåller sin egen CSS och JavaScript.</p>

<h2>Thoughts on Media Queries for Elements</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-2/mediaqueryforelement.jpg" alt="Thoughts on Media Queries for Elements" />
<a href="http://www.jonathantneal.com/blog/thoughts-on-media-queries-for-elements/">Thoughts on Media Queries for Elements</a><br>
Media Queries för element ligger högt på vår önskelista. Hur skulle det kunna se ut? Intressant är hur oändliga loopar kan hanteras.</p>

<h2>A Q&amp;A on the Picture Element</h2>

<p><a href="http://alistapart.com/blog/post/picture-element-qa">A Q&amp;A on the Picture Element</a><br>
Responsiva bilder är något oerhört viktigt för dagens webb, men det har aldrig funnits någon standard och de lösningar som finns är beroende av JavaScript. Nu har dock browser-utvecklarna äntligen enats om att implementera <code>&lt;picture&gt;</code>-elementet. Mozilla har till och med sagt att de planerar implementera det redan Q1 2014.</p>

<h2>Top JavaScript MVC Frameworks</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-2/topjsmvcframework.jpg" alt="Top JavaScript MVC Frameworks" />
<a href="http://www.infoq.com/research/top-javascript-mvc-frameworks">Top JavaScript MVC Frameworks</a><br>
InfoQ har gjort en enkät som undersöker vilket JavaScript-MVC-ramverk som går snabbast att komma igång med, och hur mycket värde det tillför.</p>

<h2>Do Not Use bodyParser with Express.js</h2>

<p><a href="http://andrewkelley.me/post/do-not-use-bodyparser-with-express-js.html">Do Not Use bodyParser with Express.js</a><br>
Varje gång Express.js hanterar ett POST-request med antingen <code>bodyParser()</code> eller <code>multipart()</code> skapas en temp-fil. De filerna tas inte bort igen av Express.js, vilket så klart är ett problem. Den här artikeln går igenom hur du kan hantera det.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hittat på nätet #1]]></title>
    <link href="http://vinnovera.se/blogg/2014/03/03/hittat-pa-natet-number-1/"/>
    <updated>2014-03-03T15:17:50+01:00</updated>
    <id>http://vinnovera.se/blogg/2014/03/03/hittat-pa-natet-number-1</id>
    <content type="html"><![CDATA[<p>Länkar till intressanta artiklar, verktyg och tjänster som vi tycker är värda att uppmärksamma.</p>

<!--more-->


<h2>Nytt API från Trafikverket</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-1/trafikapi.jpg" alt="TrafikAPI" />
<a href="http://www.trafiklab.se/">Nytt API från Trafikverket &ndash; Öppet API (Beta)</a><br/>
Ett samarbete med bland annat SL och Trafikverket erbjuder ett nytt öppet API med spännande trafikdata. Vi har redan börjat spåna på tjänster baserade på den här datan och möjligheterna är många.</p>

<h2>Designing the Perfect Hyperlink</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-1/hyperlinks.jpg" alt="Hyperlinks" />
<a href="http://sixrevisions.com/usability/hyperlink-design/">Designing the Perfect Hyperlink — It’s Not as Simple as You Think</a><br/>
Webben är uppbyggd av hyperlänkar och det är värt att fundera ett extra varv på hur de skall formgivas. Det finns mycket att hämta i att respektera traditionerna, samtidigt som de i sig kan innebära problem.</p>

<h2>Responsive prototypes in Axure RP7</h2>

<p><a href="http://uxdesign.smashingmagazine.com/2014/02/26/creating-responsive-prototypes-adaptive-views-axure-rp-7/">Responsive prototypes in Axure RP7</a><br/>
Axure RP är ett verktyg som används för &ldquo;wireframing&rdquo; och &ldquo;rapid prototyping&rdquo;. I RP7 finns det stöd för att göra prototyper av responsiva webbplatser, och har här publicerat en genomgång av hur de verktygen kan användas.</p>

<h2>App-pocalypse Now</h2>

<p><a href="http://blog.codinghorror.com/app-pocalypse-now/">App-pocalypse Now &ndash; I&rsquo;m getting pretty sick of being nagged to install your damn apps.</a><br/>
När det gäller onlinetjänster blir det allt snårigare med huruvida de gör sig bäst som appar eller webbplatser, och inte sällan utvecklas t.ex. telefonappar som skulle fungera minst lika bra som en webbappar. Här är en bloggpost som lite raljant tar upp problemen med appmarknaden.</p>

<h2>Hamburger Not the Best Choice?</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-1/icontest.jpg" alt="BurgerIcon" />
<a href="http://exisweb.net/mobile-menu-abtest">Mobile Menu AB Tested: Hamburger Not the Best Choice?</a><br/>
Det enda sättet att faktiskt veta hur användare interagerar med ens webbplats är att testa och mäta. Här bjuds vi på ett litet A/B-test på en webbplats som undersöker den numera ganska typiska smalskärmsikonen för att indikera en meny.</p>

<h2>Golden Ratio Typography Calculator</h2>

<p><a href="http://www.pearsonified.com/typography/">Golden Ratio Typography Calculator</a><br/>
För den som önskar få hjälp med att avgöra lämpliga inställningar för teckensnitten på sin webbplats finns det här verktyget. Baserat på teckenmängd per rad, innehållets bredd, teckensnittets generella utseende och annat får man här stöd för att ta fram så behaglig brödtext som möjligt.</p>

<h2>DHTMLConf 2014</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-1/dhtmlconf.jpg" alt="DHTMLConf" />
<a href="http://dhtmlconf.com/">DHTMLConf 2014</a><br/>
Det här verkar vara en väldigt givande tillställning, en DHTML-konferens som en del av JSFest.</p>

<h2>ATOM</h2>

<p><a href="http://atom.io/">ATOM &ndash; A hackable text editorfor the 21st Century</a><br/>
GitHub är i lanseringstagen för sin nya textediter Atom, som kommer att vara byggd på för webbutvecklare bekanta teknologier för att underlätta utveckling av tillägg och att göra sin texteditor mer personlig.</p>

<h2>Vinnovera</h2>

<p><img src="http://vinnovera.se/images/content/posts/hittat-pa-natet-number-1/vinnovera.jpg" alt="DHTMLConf" />
<a href="http://www.vinnovera.se/">Vinnovera</a><br/>
Nån webbyrå har gjort en webbplats åt sig själva.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inflyttningspresenten]]></title>
    <link href="http://vinnovera.se/blogg/2014/02/28/inflyttningspresent-till-earth-people/"/>
    <updated>2014-02-28T11:28:22+01:00</updated>
    <id>http://vinnovera.se/blogg/2014/02/28/inflyttningspresent-till-earth-people</id>
    <content type="html"><![CDATA[<p>Våra vänner på <a href="http://earthpeople.se/">earth people</a> har flyttat till nytt kontor i Gamla Stan. Eftersom <a href="https://twitter.com/fjallstrom">Peder</a> hos dem rantat om hur ointressanta 3D-skrivare är, så kände vi att en 3D-utskriven inflyttningspresent var på sin plats.</p>

<!--more-->


<h2>Bygget</h2>

<p><img src="http://vinnovera.se/images/content/posts/inflyttningspresent-till-earth-people/bed.jpg" alt="Printbädd" />
Utskriven logotyp i genomskinlig PLA</p>

<p><img src="http://vinnovera.se/images/content/posts/inflyttningspresent-till-earth-people/prototyper.jpg" alt="Prototyper" />
Många versioner blev det</p>

<p><img src="http://vinnovera.se/images/content/posts/inflyttningspresent-till-earth-people/breadboard.jpg" alt="Breadboard-prototyp" />
Breadboard-prototyp med RGB-lysdioder drivna av en Arduino</p>

<p><img src="http://vinnovera.se/images/content/posts/inflyttningspresent-till-earth-people/elektronik.jpg" alt="Elektronik" />
Elektroniken nedskalad med ett ATtiny45-chip</p>

<p><img src="http://vinnovera.se/images/content/posts/inflyttningspresent-till-earth-people/lysdioder.jpg" alt="Lysdioder" />
Lysdioder på ovansidan av foten</p>

<p><img src="http://vinnovera.se/images/content/posts/inflyttningspresent-till-earth-people/undersida.jpg" alt="Undersida" />
Undersidan och locket till foten med Vinnoveras logga</p>

<h2>Resultatet</h2>

<p><img src="http://vinnovera.se/images/content/posts/inflyttningspresent-till-earth-people/farger.jpg" alt="Färger" /></p>

<div class="video youtube">
    <iframe width="640" height="360" src="http://vinnovera.se//www.youtube.com/embed/L3gmu9un4Ic?rel=0&autohide=1&modestbranding=1&rel=0&showinfo=0" frameborder="0" allowfullscreen></iframe>
</div>


<h2>Mer!</h2>

<ul>
<li><a href="http://www.thingiverse.com/thing:260050">3D-modeller på Thingiverse</a></li>
<li><a href="http://www.instructables.com/id/Attiny-RGB-Mood-Light/?ALLSTEPS">Instructables &ndash; Attiny RGB Mood Light</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Garbage Collection]]></title>
    <link href="http://vinnovera.se/blogg/2014/02/19/garbage-collection/"/>
    <updated>2014-02-19T17:54:05+01:00</updated>
    <id>http://vinnovera.se/blogg/2014/02/19/garbage-collection</id>
    <content type="html"><![CDATA[<p>Garbage collection (GC) är automatiserad minneshantering i datorprogram. Det finns många olika algoritmer för garbage collection, men problemet som de alla försöker att lösa är detsamma: att identifiera använt minne som applikationen inte längre klarar av att nå, och rensa det.</p>

<!--more-->


<p>Motsatsen till garbage collection är att programmeraren själv måste allokera minne och sen avallokera minnet när det inte längre används, t.ex. <code>malloc()</code> och <code>free()</code> i C och C++.</p>

<h2>Historien om garbage collection</h2>

<p>Garbage collection uppfanns av John McCarty c:a 1959 när han arbetade med Lisp, som är ett av de första högnivåspråken. I sin uppsats <a href="http://www-formal.stanford.edu/jmc/recursive/node4.html#tex2html8">Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I</a> (1960) beskriver han en process som han kallar för &ldquo;reclamation cycle&rdquo;, eller “garbage collection”. Metoden John McCarty beskrev är idag kallad för “mark-and-sweep”, vilket är den metod JavaScript använder, om än en lite förfinad version.</p>

<h2>Garbage collection-algoritmer</h2>

<p>Det finns många olika implementationer av garbage collection. I JavaScript är det först och främst “mark-and-sweep” som används, och i en lite mindre utsträckning “reference counting”.</p>

<h3>Reference counting garbage collection</h3>

<p>Reference counting används i stort sett endast av Internet Explorer 6 och 7. Den här metoden räknar alla referenser till ett objekt, och tar bort alla objekt som inte längre har en referens.</p>

<p>Det är dock möjligt fär två olika objekt att referera till varandra, utan att annars vara refererade till.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">o2</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">o2</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="err">“</span><span class="nx">foo</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">f</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I exemplet har o och o2 inga referenser utanför funktions-scopet. De kommer dock inte bli samlade av garbage collection eftersom de har referenser till varandra.</p>

<p>En annan nackdel är att själva uppdateringen av referensräknaren kan kräva ganska stora resurser, om många referenser skapas och tas bort blir applikationen betydligt långsammare.</p>

<p>En fördel med denna metod är att objektet tas bort så fort det inte längre har några referenser, och kräver inte att applikationen stannas för att garbage collection ska köras.</p>

<p>En variant av den här metoden används bland annat i PHP.</p>

<h3>Mark-and-sweep</h3>

<p>Sedan 2012 använder i stort sett alla browsers den här algoritmen. Mark-and-sweep är en så kallad “tracing collector”. Den fungerar på det sättet att den startar vid root-objektet. I JavaScripts fall är det global-objektet. Från global letar algoritmen efter alla referenser den kan hitta, och sen alla referenser från dessa. På så sätt får garbage-collectorn ut alla objekt som går att komma åt, och tar bort alla objekt som inte går att nå.</p>

<p>Den begränsning mark-and-sweep algoritmen har är att objekt måste göras explicit oåtkomliga. Denna begränsning är däremot inte speciellt besvärande, vilket lär vara anledningen till att ingen bryr sig speciellt mycket om garbage collection.</p>

<h4>Stop-the-world</h4>

<p>Vanliga mark-and-sweep garbage collectors kör hela mark och sen sweep vid samma tillfälle, och stannar all annan programexekvering under tiden. Det kan orsaka en märkbar frysning av programmet när garbage collection körs. Mer sofistikerade algoritmer kan utföra processen i bakgrunden utan att orsaka att exekveringen saktas ned.</p>

<h4>Incremental GC</h4>

<p>Firefox introducerade “incremental garbage collections” (IGC) i version 16. Vad IGC gör är att den delar upp mark-fasen av mark-and-sweep i flera cykler. Sweep-fasen pausar fortfarande browsern men den är nu betydligt kortare. Det fungerar bra så länge det inte används väldigt mycket minne, om för mycket minne används så hinner IGC inte med att garbage collecta och browsern går över till att köra en full mark-and-sweep.</p>

<h4>Incremental Generational Garbage Collection</h4>

<p>Incremental Generational Garbage Collection (IGGC) lades till Chrome och V8 i 2011. IGGC arbetar utifrån antagandet att de yngsta referenserna är de mest kortlivade och att garbage collectorn inte behöver kontrollera de äldsta referenserna varje cykel. Om ett objekt överlever en cykel flyttas det till en äldre generation.</p>

<h2>Minneseffektiv kod</h2>

<p>Det finns inte så mycket man behöver tänka på när man skriver JavaScript i relation till garbage collection, precis som det ska vara. Men det finns några saker som är värt att tänka på:</p>

<p>För att minimera den tid som används av garbage collectorn bör man undvika att skapa för många objekt. Varje gång du använder <code>new</code> keywordet skapas ett nytt objekt. Men även när du skriver <code>[ ]</code> eller <code>{ }</code>. I JavaScript är även funktioner objekt.</p>

<p>Dock kommer du aldrig komma ifrån att skapa garbage. Att invokera en funktion kräver minne, som sen behöver rensas även om funktionen i övrigt inte skapar någon garbage.</p>

<h3>global scope</h3>

<p>Ett objekt som skapas utanför något specifikt scope tillhör det globala scopet. Eftersom mark-and-sweep-algoritmen markerar alla objekt som går att nå från det globala scopet kommer globala objekt aldrig att rensas av garbage collectorn.
Alla variabler som instansieras utan “var”-keywordet tillhör även dom det globala scopet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">test</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">Hej</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">D</span><span class="err">å’</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Efter det att <code>test()</code> körts går inte längre <code>str</code> att nås från <code>global</code> objectet och kommer såledas frias. Både <code>b</code> och <code>c</code> variablerna tillhör det globala scopet och det minne de tar upp frigörs aldrig.</p>

<h3>delete och null keywords</h3>

<p>För att vara säker på att ett objekt blir borttaget av garbage collectorn kan du helt enkelt sätta dess värde till <code>null</code>. JavaScript har även ett <code>delete</code>-keyword. Även om det indirekt kan vara ett sätt att ta bort referensen till ett objkct, är det i första hand endast användbart när du vill sätta ett objekts property till <code>undefined</code>, istället för att sätta det till <code>null</code>. <code>delete</code> fungerar inte på variabler, utan returnerar då endast <code>false</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="err">‘</span><span class="nx">test</span><span class="err">’</span><span class="p">};</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">s</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'><span class="nx">s</span><span class="p">.</span><span class="nx">data</span> <span class="o">===</span> <span class="err">‘</span><span class="nx">test</span><span class="err">’</span><span class="p">;</span> <span class="c1">// false</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">test</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">m</span><span class="p">;</span> <span class="c1">// return false;</span>
</span><span class='line'><span class="nx">m</span> <span class="o">===</span> <span class="err">‘</span><span class="nx">test</span><span class="err">’</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="nx">m</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="nx">m</span> <span class="o">===</span> <span class="err">‘</span><span class="nx">test</span><span class="err">’</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vad som låter som ett rimligt antagande är att vi borde kunna använda <code>delete</code> tillsammans med root-objektet (<code>this</code>). Det antagandet stämmer dock inte.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;z&#39;</span><span class="p">};</span>
</span><span class='line'><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span> <span class="c1">// return false</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">data</span> <span class="o">===</span> <span class="s1">&#39;z&#39;</span><span class="p">;</span> <span class="c1">// true</span>
</span><span class='line'><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span> <span class="c1">// return true</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">data</span> <span class="o">===</span> <span class="s1">&#39;z&#39;</span><span class="p">;</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>var keywordet</h3>

<p>Var noga med hur du använder <code>var</code> keywordet.</p>

<p>Speciellt i intervall där varje iteration är ett eget scope skapas det lätt väldigt mycket onödigt garbage.</p>

<h3>Mindre function-scope</h3>

<p>Var noga med dina funktions-scope. Det kan vara värt att dela en stor funktion i mindre. Det skapar garbage oftare men i mindre mängd. Det utnyttjar även den generationella garbage collectorn.</p>

<p>I exemplet ska vi räkna ut den initiella <code>velocity.x</code>och <code>velocity.y</code>och för ett objekt. Det gjorde vi tidigare i konstruktorn av objektet, földen av det var att de hjälp-variabler vi använder i uträkningen inte gick ur scope förrän vi förstörde objektet. Nu går variablerna ur scope så fort <code>init()</code> metoden är klar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dx</span><span class="p">,</span> <span class="nx">dy</span><span class="p">,</span> <span class="nx">distance</span><span class="p">,</span> <span class="nx">dv</span><span class="p">,</span> <span class="nx">tx</span><span class="p">,</span> <span class="nx">ty</span><span class="p">,</span> <span class="nx">tv</span><span class="p">,</span> <span class="nx">dtv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Distance of particle from the center across the x and y axis</span>
</span><span class='line'>  <span class="nx">dx</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">options</span><span class="p">.</span><span class="nx">center_x</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">dy</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">options</span><span class="p">.</span><span class="nx">center_y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Distance of particle from the center (radius of orbit)</span>
</span><span class='line'>  <span class="nx">distance</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span> <span class="nx">dx</span> <span class="o">*</span> <span class="nx">dx</span> <span class="o">+</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">dy</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// velocity towards center (gravity) through distance</span>
</span><span class='line'>  <span class="c1">// We substitute the sum of masses with 1</span>
</span><span class='line'>  <span class="nx">dv</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">options</span><span class="p">.</span><span class="nx">gravity</span><span class="p">)</span> <span class="o">/</span> <span class="nx">distance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Tangental velocity</span>
</span><span class='line'>  <span class="nx">dtv</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span> <span class="nx">dv</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">tx</span> <span class="o">=</span> <span class="nx">dy</span> <span class="o">*</span> <span class="nx">dtv</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">ty</span> <span class="o">=</span> <span class="nx">dx</span> <span class="o">*</span> <span class="nx">dtv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">velocity</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">tx</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">velocity</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="nx">ty</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Loopar</h3>

<p>Istället för:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bar</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>skriv:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bar</span><span class="p">();</span>
</span><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span><span class="mi">16</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Det första exemplet skapar ett nytt objekt varje iteration, som är onåbart i nästa. Det andra exemplet skapar ett objekt som sen återanvänds, fast med nya värden.</p>

<h3>Object pool</h3>

<p>Det kan ibland vara bra att skapa en “objektpool”. När du ofta ska skapa och ta bort liknande objekt.  Det gör du genom att använda två arrayer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">activeObject</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">objectPool</span>   <span class="o">=</span> <span class="p">[];</span>
</span></code></pre></td></tr></table></div></figure>


<p>När du vill skapa ett nytt objekt plockar du det ur arrayen <code>objectPool</code>med oanvända objekt och lägger det i <code>activeObject</code> arrayen. När du sen är klar med ditt objekt flyttar du tillbaka det till poolen. På så sätt skapas inga nya objekt efter startup och inget tas heller bort av garbage collectorn.</p>

<p>Den här metoden är användbar när man animerar många objekt. Till exempel punkter i en graf.</p>

<h2>Referenser</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29">http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Memory_Management">https://developer.mozilla.org/en-US/docs/JavaScript/Memory_Management</a></li>
<li><a href="http://docstore.mik.ua/orelly/webprog/jscript/ch11_03.htm">http://docstore.mik.ua/orelly/webprog/jscript/ch11_03.htm</a></li>
<li><a href="http://buildnewgames.com/garbage-collector-friendly-code/">http://buildnewgames.com/garbage-collector-friendly-code/</a></li>
<li><a href="https://blog.mozilla.org/dmandelin/2012/07/20/incremental-gc-now-in-firefox-aurora/">https://blog.mozilla.org/dmandelin/2012/07/20/incremental-gc-now-in-firefox-aurora/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery vs Mootools]]></title>
    <link href="http://vinnovera.se/blogg/2014/01/07/jquery-vs-mootools/"/>
    <updated>2014-01-07T14:41:39+01:00</updated>
    <id>http://vinnovera.se/blogg/2014/01/07/jquery-vs-mootools</id>
    <content type="html"><![CDATA[<p>&ldquo;jQuery eller Mootools&rdquo; är frågan många utvecklare ställer sig. Det är möjligt att ämnet har blivit något uttjatat genom åren, men det avgör du nog bäst själv.</p>

<p>Innan jag börjar jämföra dessa vill jag presentera dem lite<!--more--> först. Jag vill även påpeka att jag har jobbat med dessa två bibliotek ett par år, och även om jag har en favorit hoppas jag att det inte lyser igenom för mycket.</p>

<h2>Vad är jQuery</h2>

<p>jQuery behöver knappast någon presentation, har du jobbat med gränssnittsutveckling känns det rätt rimligt att anta att du någon gång har kommit över jQuery.</p>

<p>jQuery är kort sagt ett javascript bibliotek som riktar in sig på att förenkla ditt sätt att arbeta med HTML manipulering, effekter, event med mera genom ett enkelt API som fungerar genom olika webbläsare.</p>

<p>Jag ska inte tråka ut dig med siffror, men antalet användare är med marginal högst på marknaden (bland javascript bibliotek) och webbplatser som Wordpress och Wikipedia använder sig utav jQuery, vilket de även stolt visar upp.</p>

<h2>Mootools</h2>

<p>Jag har fått den uppfattningen att många tror att Mootools är gammalt och uråldrat. Vad det beror på vet jag inte och det är inget jag tänker analysera heller.</p>

<p>Sanningen är dock den att Mootools uppdateras relativt ofta, inte lika ofta som jQuery men det behöver inte vara något dåligt.</p>

<p>Mootools är ett javascript bibliotek precis som jQuery men ändå inte. Mootools inriktar sig på &ldquo;intermediate to advanced JavaScript developers&rdquo;. Istället för att förändra sättet du skriver Javascript på försöker Mootools göra det kraftfullare med en mer objekt orienterad approach. Även här finns cross-browser stöd, HTML manipulering, events och så vidare.</p>

<h2>Tekniska skillnader</h2>

<p>Jag börjar med de direkt synliga skillnaderna mellan dessa två bibliotek: syntax.</p>

<p>&ldquo;jQuery has changed the way that millions of people write JavaScript&rdquo; &ndash; skriver jQuery på deras webbplats.</p>

<p>Mycket riktigt skiljer sig jQuery en del från &ldquo;vanilla&rdquo; JavaScript. Mootools å andra sidan har fokuserat mer på att göra JavaScript kraftfullare, hellre än att ändra sättet att skriva på. Vi tittar på lite exempel.</p>

<h3>Skapa ett element</h3>

<p>Vi börjar med enklast möjliga, skapa ett HTML element som ska ha klassen &ldquo;new&rdquo; som vi sedan ska lägga till i body taggen.</p>

<h4>jQuery</h4>

<p>Enligt dokumentationen föreslås <a href="http://api.jquery.com/append/">append</a> funktionen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;new&quot; /&gt;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Mootools</h4>

<p>Mootools erbjuder en <a href="http://mootools.net/docs/core/Element/Element">Element</a> klass som vi använder för detta ändamål:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">newElement</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Element</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;new&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">grab</span><span class="p">(</span><span class="nx">newElement</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Vanilla</h4>

<p>För att tydligt se likheter och skillnader jämför vi med ren och fin JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">newElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">newElement</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;new&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">newElement</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Summering</h4>

<p>jQuery, med deras sätt att ändra på hur du skriver JavaScript, klarade uppgiften på 1 rad. I Mootools exemplet ser vi tydligt att det är mer objekt orienterat. Sista exemplet säger jag inte så mycket om, men som du ser är det väldigt likt Mootools exemplet.</p>

<p>En sak du kanske märker om vi går tillbaka till Mootools exemplet är att jag även där (såsom i sista exemplet) använder <code>document.body</code> som alltså inte tillhör Mootools api:t. Mer om det längre ner.</p>

<h3>Manipulera HTML dokument</h3>

<p>Här finns en stor skillnad som är viktig att komma ihåg. Som nämnt tidigare förändrar jQuery sättet vi skriver på och detta blir väldigt tydligt här. För att kunna jobba med element i jQuery måste det vara ett <a href="http://api.jquery.com/jQuery/">jQuery objekt</a>. Mootools bygger ut JavaScript och kan därför användas rakt av.</p>

<p>För att demonstrera detta ska vi hitta <strong>body</strong> taggen och lägga på en klass.</p>

<h4>jQuery</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;my-body&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Mootools</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;my-body&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Summering</h4>

<p>Det som händer när vi använder <code>$('body')</code> är att jQuery processar strängen &lsquo;body&rsquo;, försöker klura ut om vi vill hitta något eller skapa något och, när den är klar, returnerar en array som innehåller <code>document.body</code>. Alltså det vi använde direkt i Mootools exemplet. Du kan nog räkna ut själv vad som är snabbast. För att kunna snabba upp jQuery lite kan vi ändra koden enligt följande:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;my-body&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Det som händer nu är att jQuery vet vad vi vill och kan hitta elementet lite snabbare. Men som jag nämnde ovan, returneras en array, vilket gör att arrayen först loopas igenom och funktionen <a href="http://api.jquery.com/addClass/">addClass</a> läggs på varje item i arrayen, om det är ett element. Detta sker alltså även om vi från början visste att vi bara hade 1 element.</p>

<h3>Ett sista exempel</h3>

<p>Jag känner mig extra snäll idag, så jag bjuder på ett exempel till. Något som är kul och oftast används är <strong>effekter</strong>. Både jQuery och Mootools stödjer detta men skiljer sig väldigt mycket. I exemplena nedan ska vi få ett element att ändra bredd och färg med en övergång.</p>

<h4>jQuery</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#coolBox&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#ff0&#39;</span>
</span><span class='line'><span class="p">},</span> <span class="s1">&#39;short&#39;</span><span class="p">,</span> <span class="s1">&#39;linear&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Mootools</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">coolBox</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">&#39;coolBox&#39;</span><span class="p">),</span> <span class="nx">morph</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Fx</span><span class="p">.</span><span class="nx">Morph</span><span class="p">(</span><span class="nx">coolBox</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">duration</span><span class="o">:</span> <span class="s1">&#39;short&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">transition</span><span class="o">:</span> <span class="s1">&#39;linear&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">morph</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#ff0&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Summering</h4>

<p>Ganska stora skillnader igen. jQuery klarar det på en rad och lite mer krävs för Mootools. Stora skillnaden är att Mootools erbjuder en <a href="http://mootools.net/docs/core/Fx/Fx.Morph">Morph</a> klass där du kan sätta en config (t.ex. duration och transition) och via funktionen <a href="http://mootools.net/docs/core/Fx/Fx.Morph#Fx-Morph:start">start</a> startar du animationen med dom css attributen du vill animera och configen som du satte tidigare används.</p>

<h2>Inga mer exempel, vad gör vi nu?</h2>

<p>Att välja mellan dessa två är inte lika enkelt som att välja mellan Coca Cola eller Pepsi. Oftast kommer du in i ett projekt eller jobbar i ett team, oftast kommer det också vara jQuery som gäller.</p>

<p>Har man något att säga till om eller det är ditt eget projekt kan det vara värt att fundera på Mootools. Mootools blir väldigt kraftfullt i stora projekt, även i stora team. Med deras objekt orienterade sätt att jobba tvingas alla att skriva på samma sätt och jag personligen tycker att Mootools känns mer moget.</p>

<p>Fördelen med jQuery är att det är snabbt att lära sig även om man inte talar JavaScript i sömnen. jQuery blir riktigt användbart för designers eller för utvecklare med liten till ingen förståelse för JavaScript.</p>

<p>Självklart är det en stor fördel att känna till båda två. Det var allt, ut och lek nu!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vinnovera-pepparkakor]]></title>
    <link href="http://vinnovera.se/blogg/2013/12/14/vinnovera-pepparkakor/"/>
    <updated>2013-12-14T09:54:32+01:00</updated>
    <id>http://vinnovera.se/blogg/2013/12/14/vinnovera-pepparkakor</id>
    <content type="html"><![CDATA[<p>Från vektorlogotyp till 3d-modell till 3d-utskrivna pepparkaksformar till pepparkakor.
3D-modeller finns att <a href="http://www.thingiverse.com/thing:272139">ladda hem på Thingiverse</a>.</p>

<!--more-->


<p><img src="http://vinnovera.se/images/content/posts/vinnovera-pepparkakor/sketchup.jpg" alt="Google Sketchup" />
<img src="http://vinnovera.se/images/content/posts/vinnovera-pepparkakor/printer.jpg" alt="Printar" />
<img src="http://vinnovera.se/images/content/posts/vinnovera-pepparkakor/formar.jpg" alt="Formar" />
<img src="http://vinnovera.se/images/content/posts/vinnovera-pepparkakor/kavlat.jpg" alt="Kavlat" />
<img src="http://vinnovera.se/images/content/posts/vinnovera-pepparkakor/gradda.jpg" alt="Gräddat" />
<img src="http://vinnovera.se/images/content/posts/vinnovera-pepparkakor/fardiga.jpg" alt="Färdiga" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bildmanipulering i JavaScript]]></title>
    <link href="http://vinnovera.se/blogg/2013/12/13/bildmanipulering-i-javascript/"/>
    <updated>2013-12-13T16:17:13+01:00</updated>
    <id>http://vinnovera.se/blogg/2013/12/13/bildmanipulering-i-javascript</id>
    <content type="html"><![CDATA[<p>När det läggs ett digitalt filter över en bild manipuleras pixeldatan i bilden. Färgerna i bilden räknas om för varje pixel och sedan visas en ny bild med de nya värderna. I fortsättningen kommer jag att använda termen filter för att beskriva manipuleringen<!--more--> av bildens data med hjälp av Javascript.</p>

<p>Några vanligt förekommande filter är inverterade färger, sepia, blur, kontrastökning, gråskala med mera.</p>

<p>I dagsläget är det vanligast att manipulera bilderna i t.ex. Photoshop innan de används på en hemsida, men det finns alternativ och ett av dom är Javascript.</p>

<h2>Varför ska man använda filter?</h2>

<p>De som underhåller webbplatser är oftast inte själva utvecklare eller grafiker. Vill de placera samma bild på flera olika ställen men med olika filter behöver de inte själva editera bilden med hjälp av externa verktyg.</p>

<p>Om en sida har flera olika instanser av samma bild med olika filter, t.ex. porträttbilder av Andy Warhol, behöver browsern endast hämta bilden en gång. Det kan leda till en snabbare site med färre anrop.</p>

<h2>Kan man använda filter?</h2>

<p>Om browsern stödjer canvas-objektet kan man använda filter. Idag har följande browsers stöd för canvas:</p>

<ul>
<li>Internet Explorer 9+</li>
<li>Firefox</li>
<li>Opera</li>
<li>Chrome</li>
<li>Safari</li>
<li>Mobile browsers</li>
</ul>


<p>I Android 4.0 ursprungs browser finns det, vad som antas vara, en bugg som gör att anges alpha i något annat än 0 eller 255 ändras pixelns färg istället.</p>

<p>Prestandan för canvas skiljer sig åt på olika plattformar. Desktop har generellt bra prestanda men mobila browsers kan vara långsammare.</p>

<h2>Hur fungerar filter?</h2>

<p>Som nämnt tidigare handlar det om att räkna om värden i bildens pixeldata. För att kunna manipulera bilder behövs ett canvas att rita på och ett ImageData-objekt.</p>

<p>Ett ImageData-objekt är en del av ett canvas, inte en bild eller en form. Objektet innehåller information för varje pixel inom den delen. Informationen består av fyra delar per pixel, RGBA:</p>

<p>R &ndash; Röd    (0-255) <br />
G &ndash; Grön   (0-255) <br />
B &ndash; Blå        (0-255) <br />
A &ndash; Alpha   (0-255, 0 = helt osynlig &ndash; 255 = helt synlig)</p>

<p>Är en pixel röd och synlig har den värdet (255,0,0,255) och det är de värden som lagras i data-egenskapen hos ImageData-objektet. Principen för att rita på ett canvas är samma för bilder som för andra objekt, därför beskrivs först hur man ritar en simpel form.</p>

<h3>Form</h3>

<p>Koden nedan skapar ett objekt som är 100 x 100 px, där varje pixel är blå, och placerar objektet på ett canvas 10px från kanterna.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;myCanvas&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Skapa ett objekt att arbeta med</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">imageData</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">createImageData</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Loopa igenom pixlarna</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">imageData</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">+=</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">imageData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">//red</span>
</span><span class='line'>    <span class="nx">imageData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">//green</span>
</span><span class='line'>    <span class="nx">imageData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>    <span class="c1">//blue</span>
</span><span class='line'>    <span class="nx">imageData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>    <span class="c1">//alpha</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Skriv ut objektet på canvaset</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">putImageData</span><span class="p">(</span><span class="nx">imageData</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resultat:<br /><img src="https://lh3.googleusercontent.com/eMaoG_Om5swKW1iyfLoZ36M_zw7LRuYk0A6oxVqzYV7JKblIScg7ILDyGDiVkGCNh3S-BOKydcM18rtiZBt4-9Xvvi5BiCMMpupJPnzMiNmvc2qFkxBVHYJJlA" alt="" /></p>

<h4>Funktioner</h4>

<h5>createImageData():</h5>

<p>Skapar ett nytt tomt ImageData-objekt. Objektets pixelvärden är ursprungligen (0,0,0,0), svarta och genomskinliga. Metoden används om det inte redan innan finns ett objekt att arbeta med, t.ex en bild, eller om ett objekt ska kopieras.</p>

<p>Syntax:</p>

<p>Det finns två versioner av metoden,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">imgData</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">createImageData</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span><span class="nx">height</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>width = Bredden på det nya ImageData-objektet i px.</li>
<li>height = Höjden på det nya ImageData-objektet i px.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">imgData</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">createImageData</span><span class="p">(</span><span class="nx">imageData</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>imageData = ett annat ImageData-objekt.</li>
</ul>


<h5>putImageData():</h5>

<p>Skriver ut pixeldatan från ett specificerat ImageData-objekt på canvaset.</p>

<p>Syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">putImageData</span><span class="p">(</span><span class="nx">imgData</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">dirtyX</span><span class="p">,</span> <span class="nx">dirtyY</span><span class="p">,</span> <span class="nx">dirtyWidth</span><span class="p">,</span> <span class="nx">dirtyHeight</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>imgData = Det imageData-objekt som ska skrivas ut på canvaset.</li>
<li>x = x-koordinaten för det övre vänstra hörnet av ImageData-objektet, angivet i px.</li>
<li>y = y-koordinaten för det övre vänstra hörnet av ImageData-objektet, angivet i px.</li>
<li>dirtyX = (optional) Det horizontella x-värdet att placera bilden på, angivet i px.</li>
<li>dirtyY = (optional) Det horizontella y-värdet att placera bilden på, angivet i px.</li>
<li>dirtyWidth = (optional) Bredden som ska användas för att rita ut bilden på canvaset.</li>
<li>dirtyHeight =(optional) Höjden som ska användas för att rita ut bilden på canvaset.</li>
</ul>


<h3>Bild</h3>

<p>För att manipulera en bild behövs två ytterligare funktioner, drawImage och getImageData. Funktionen createImageData används när man vill kopiera en existerande bild eller för att skapa en tom yta.</p>

<p>Html:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">id=</span><span class="s">&quot;image&quot;</span> <span class="na">src=</span><span class="s">&quot;src.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="na">width=</span><span class="s">&quot;220&quot;</span> <span class="na">height=</span><span class="s">&quot;277&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;myCanvas&quot;</span> <span class="na">width=</span><span class="s">&quot;220&quot;</span> <span class="na">height=</span><span class="s">&quot;277&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;image&quot;</span><span class="p">).</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;myCanvas&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//Hämta bild</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;image&quot;</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">//Rita ut bild på canvas</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//Hämta bilddata</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">imgData</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// invertera färgerna i bilden</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">imgData</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">+=</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">imgData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">-</span><span class="nx">imgData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">imgData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">-</span><span class="nx">imgData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">imgData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">-</span><span class="nx">imgData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">imgData</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//Skriv ut den manipulerade bilden på canvaset</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">putImageData</span><span class="p">(</span><span class="nx">imgData</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resultat:<br /><img src="https://lh6.googleusercontent.com/BZDl6xazl4AZS4_vbJJK2ZzWN_MVIR8KWM3F7dwCTHGiI0Ryk-Ejqr8_GlsFN0JZH8w_dj61KYmrRL4Ad5_niAfjblRPSGIiA4gVDstauj-G7bkLTt2Q2O31Pg" alt="" /></p>

<h4>Funktioner</h4>

<h5>drawImage():</h5>

<p>Ritar ut en bild, video eller ett canvas på ett canvas. Metoden kan även rita ut delar av en bild och ändra en bilds eller videos storlek.</p>

<p>Syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">width</span><span class="p">,</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span><span class="nx">sx</span><span class="p">,</span><span class="nx">sy</span><span class="p">,</span><span class="nx">swidth</span><span class="p">,</span><span class="nx">sheight</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">width</span><span class="p">,</span><span class="nx">height</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>img = Det element som ska användas &ndash; bild, canvas eller video.</li>
<li>x = x-koordinaten där elementet ska placeras.</li>
<li>y = y-koordinaten där elementet ska placeras.</li>
<li>width = (optional)  vidden av elementet som ska användas (öka el. minska strl på elem).</li>
<li>height = (optional) höjden av elementet som ska användas (öka el. minska strl på elem).</li>
<li>sx = (optional) x-koordinaten där bilden ska börja skäras.</li>
<li>sy = (optional) y-koordinaten där bilden ska börja skäras.</li>
<li>swidth = (optional) vidden av den beskurna bilden.</li>
<li>sheight = (optional) höjden av den beskurna bilden.</li>
</ul>


<h5>getImageData():</h5>

<p>Retunerar ett ImageData-objekt som kopierat pixeldatan från en specificerad del av canvaset.</p>

<p>Syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>x = x-koordinaten för det övre vänstra hörnet som den ska börja kopiera från, angivet i px.</li>
<li>y = y-koordinaten för det övre vänstra hörnet som den ska börja kopiera från, angivet i px.</li>
<li>width = Bredden på det du vill kopiera.</li>
<li>height =Höjden på det du vill kopiera.</li>
</ul>


<h2>Slutsatser</h2>

<p>När jag jämförde två sidor, en där jag hade två bilder och en där jag hade en bild som jag skrev ut två gånger med hjälp av filter-funktioner, fick jag följande resultat:</p>

<table class="airy">
<tr>
<td></td>
<td>Javascript</td>
<td>två bilder</td>
</tr>
<tr>
<td>Antal requests</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>kb överfört</td>
<td>149</td>
<td>285</td>
</tr>
<tr>
<td>paint (ms)</td>
<td>3.0</td>
<td>39.2</td>
</tr>
<tr>
<td>hämta bild/bilder (ms)</td>
<td>23</td>
<td>150</td>
</tr>
<tr>
<td>finished loading (ms)</td>
<td>117</td>
<td>198</td>
</tr>
</table>


<p>Jag fick inte de resultat jag hade väntat mig och det beror främst på att jag trodde att paint-tiden skulle vara högre när jag använde canvas-objektet. Tittar man på ‘kb överfört’ tycker jag att man tydligt ser att fördelen men att använda filter är att man bara behöver ladda ner en bild. Tänker man den situationen i större skala med t.ex tio stycken bilder blir filter betydligt snabbare. Javascriptet jag använde var minimalt och använder man ett komplexare skript skulle tiden öka för att exekvera skriptet.</p>

<p>Ett ytterligare alternativ som är värt att nämna är web-kit filter. Varför jag inte anser att det är användbart än är att två av de störta webbläsarna, Firefox och Internet Explorer, inte har stöd för det. Skulle de utveckla stöd kan det bli ett starkt alternativ.</p>

<h3>Bibliotek</h3>

<p>Jag tror inte att det kommer att vara tidseffektivt att skriva ett eget Javascript-plugin. Uträkningarna är komplexa och det krävs väldigt noga testning för att inte slöa ner webbsidor. Nedan är några av de bibliotek som jag hittat som verkar ha potential.</p>

<p>Det bibliotek som verkar användas mest för tillfället är fabricjs. Det kan bero på att det innehåller väldigt mycket mer än bara filter &ndash; t.ex. former, drag-n-drop, resize med flera. Jag har även tittat på följande:</p>

<ul>
<li>Filterr2 <a href="https://github.com/alexmic/filtrr/tree/master/filtrr2">https://github.com/alexmic/filtrr/tree/master/filtrr2</a><br />
Open source som inte känns helt färdigutvecklat. Senaste buggfixen var fem månader sedan.</li>
<li>Pixastic <a href="http://www.pixastic.com/lib/docs/">http://www.pixastic.com/lib/docs</a><br />
Ett gratis bibliotek där du själv kan välja vilka komponenter du vill ladda ner.</li>
<li>glfx.js <a href="https://github.com/evanw/glfx.js">https://github.com/evanw/glfx.js</a><br />
Ett bibliotek som använder WebGL. Stödjs endast av de senaste browsers.</li>
<li>camanjs <a href="http://camanjs.com/">http://camanjs.com/</a><br />
Jag tror att camanjs har störts potential att vara användbart. Biblioteket har noga utförd dokumentation, uppdateras kontinuerligt, uppmanar till tester och är helt gratis.</li>
</ul>


<h2>Referenser</h2>

<ul>
<li><a href="http://www.khronos.org/registry/typedarray/specs/latest/#7.1">http://www.khronos.org/registry/typedarray/specs/latest/#7.1</a></li>
<li><a href="http://www.w3schools.com/tags/ref_canvas.asp">http://www.w3schools.com/tags/ref_canvas.asp</a></li>
<li><a href="http://html5doctor.com/video-canvas-magic/">http://html5doctor.com/video-canvas-magic/</a></li>
<li><a href="http://caniuse.com/css-filters">http://caniuse.com/css-filters</a></li>
</ul>


<p>Codepen :
(Egna bilder behövs för att testa skripten) <br />
Länk till Javascript version: <a href="http://codepen.io/Sandra/pen/LjGgh">http://codepen.io/Sandra/pen/LjGgh</a> <br />
Länk till version med två bilder :  <a href="http://codepen.io/Sandra/pen/lrjvJ">http://codepen.io/Sandra/pen/lrjvJ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing]]></title>
    <link href="http://vinnovera.se/blogg/2013/12/12/unit-testing/"/>
    <updated>2013-12-12T14:22:24+01:00</updated>
    <id>http://vinnovera.se/blogg/2013/12/12/unit-testing</id>
    <content type="html"><![CDATA[<p>När vi skriver kod så vill vi när det är möjligt kunna skriva kod som kommer att underlätta för oss också i framtiden. För att kunna skriva kod som ska vara möjlig att använda igen eller vara stabil under längre tid, behöver den vara möjlig<!--more--> att testa regelbundet. Den behöver också bestå av utbrytbara delar, så att delarna kan passas in igen i ett annat sammanhang längre fram, eller skrivas om vid behov utan att påverka sin omgivning.</p>

<p>När vi utvecklar hållbara och långsiktiga applikationer är det viktigt att koden vi skriver beter sig konsekvent. Det måste gå att förutse hur en funktion eller ett plugin beter sig som vi har förväntat oss, även när den används under nya omständigheter.</p>

<p>Det är därför vi måste testa.</p>

<h2>Testning</h2>

<h3>När och hur kan man testa</h3>

<p>Det finns olika stadier av testning, inte sällan grupperade som “validation testing”, “integration testing” samt “unit testing” och det är det senare jag tänker ta upp i närmare detalj här, då det är den testprocess som ligger närmast mig som utvecklare. Men först en kvick genomgång av de olika stadierna.</p>

<h4>Unit testing</h4>

<p>Unit testing är när man bryter isär alla delar i en applikation i så små testbara enheter som möjligt, och testar varje enhet separat. Ofta är en unit t.ex. en funktion, men kan ibland också vara en hel modul eller ett interface såsom en klass. Varje unit testas ihop med ett dataset för att se att varje del är redo att användas.</p>

<h4>Integration testing</h4>

<p>När alla units är bedömda att vara fungerande så kan man testa dem ihop, vilket kallas för Integration testing. Här använder man sig oftast av testplaner, en systematisk testordning som skall spegla ett tänkt workflow. I det här skedet tittar man också på interaktioner mellan olika units för att se om de fungerar som tänkt.</p>

<h4>Validation testing</h4>

<p>I det här skedet testar man huruvida applikationen uppfyller de krav som ställts av beställare och användare. Den här typen av tester bör vara möjliga att utföra av en tredje part, utan insikt i hur applikationen är byggd rent tekniskt.</p>

<h2>Testdriven utveckling</h2>

<h3>Test först, kod sen</h3>

<p>När man ägnar sig åt testdriven utveckling, så betyder det normalt att man börjar med att identifiera vad en applikation skall utföra, för att sedan bryta ned detta i sådana beståndsdelar att de går att identifiera som enskilda units. Sedan, istället för att direkt börja skriva programkod, så börjar man med att utveckla tester för varje unit. När alla testerna är färdigskrivna inleds arbetet med själva programkoden, och när alla tester validerar så är uniten färdig. Detta ger en tydligare bild av vad varje enskild del av applikationen skall klara av och hur den skall fungera.</p>

<h3>Refactoring</h3>

<p>Det andra alternativet, när det av olika anledningar inte är praktiskt att skriva tester i förväg, är att skriva om koden i efterhand för att göra den testningsbar. Detta innebär att förändra koden, utan att egentligen förändra vad koden är menad att göra.</p>

<h2>Unit testing</h2>

<h3>Vad är en unit</h3>

<p>Så, vad är då en unit? En unit är de minsta beståndsdelarna vi kan bryta ned en applikation till. Oftast är det funktioner och metoder, men det kan ibland också röra sig om interfaces.</p>

<h4>Metoder och funktioner</h4>

<p>Det typiska för en testbar funktion är att den kräver att någonting stoppas in, och att vi får något annat tillbaka. T.ex. kan det här vara en funktion som förvandlar en datumform till en annan (från &lsquo;130402&rsquo; till &lsquo;Andra april, 2013&rsquo;), eller som gör en avståndsberäkning eller liknande. Det är dock också möjligt att göra tester av funktioner som inte svarar med något, utan som istället påverkar ett annat objekt.</p>

<h4>Interface och klasser</h4>

<p>Ibland behöver vi testa sådant som inte ger ett direkt resultat, som t.ex. att flytta på ett objekt. Det kan också vara så att det vi testar inte är ett publikt värde utan en privat variabel. I sådana fall skriver man tester mot interfacet snarare än en enskild metod. Man kör en metod med ett visst värde, och när metoden är genomförd görs en kontroll mot ett värde eller kontrollfunktion i interfacet för att se om förändringen är den förväntade. T.ex. kan vi köra funktionen &ldquo;moveBulletTowardsShip&rdquo; i ett spel, och när metoden är körd kan vi testa om vår &ldquo;bullet&rdquo; har flyttat sig på det vis vi förväntat oss.</p>

<h3>Vad är ett test</h3>

<h4>Vad stoppar vi in, vad föväntar vi oss ut</h4>

<p>Låt säga att jag har en funktion som delar upp ett textstycke i ett antal enskilda rader, där varje rad är högst 60 tecken. Vad vi då låter testet skicka in till funktionen som vi testar är ett antal textstycken av olika längd. I varje test behöver vi också skicka med ett förväntat resultat, i det här fallet skulle vi t.ex. kunna titta på antalet rader vi får tillbaka, samt längden på varje enskild rad.</p>

<h2>Ramverk för javascript</h2>

<p>Det finns många olika ramverk som används för att testa javascript, som Buster.JS, Sinon.js, Jasmine, QUnit eller Mocha. Jag har här valt att titta närmare på QUnit och Mocha, då de är bra exempel på olika angreppsvinklar på javascript-testning.</p>

<h3>QUnit</h3>

<p>QUnit är ett relativt lättviktigt testramverk. Det är ett ramverk som fokuserar helt på att testa javascript som körs i browsern. Då det är det testramverk som används vid utveckling av jQuery är det ett verktyg som är särskilt enkelt att komma igång med om man behöver testa mycket DOM-manipulation.</p>

<h4>Setup</h4>

<p>Det som krävs för att köra tester med QUnit är att ta hem en javascriptfil och en css-fil, samt skapa en HTML-fil som kör testerna. HTML-filen behöver åtminstone en holder att skriva ut testresultaten i (&lsquo;qunit&rsquo;) och om du ska testa DOM-manipulation behövs en holder för QUnit att skapa DOM-elementen i (&lsquo;qunit-fixture&rsquo;).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/qunit-1.12.0.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;qunit&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;qunit-fixture&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;myList&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;script src=&quot;js/vendor/jquery-1.10.1.min.js&quot;&gt;&lt;\/script&gt;&#39;</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/vendor/qunit-1.12.0.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/tests.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Tester</h4>

<p>I exemplet ovan har jag själva funktionerna jag vill testa i main.js, och testerna i tests.js. Så här ser ett enkelt test ut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;multiLineText-test&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">deepEqual</span><span class="p">(</span><span class="nx">multiLineText</span><span class="p">(</span><span class="s1">&#39;I have a thing to say&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">[</span><span class="s1">&#39;I have&#39;</span><span class="p">,</span> <span class="s1">&#39;a thing&#39;</span><span class="p">,</span> <span class="s1">&#39;to say&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Med QUnit skapas ett test genom att köra &ldquo;test&rdquo;-funktionen. Till den skickar man in en beskrivning av testet (&ldquo;multiLineText-test&rdquo;) samt en funktion. I den här funktionen kan du köra kod, samt framförallt göra s.k. &ldquo;assertions&rdquo;. QUnit har i huvudsak två typer av assertions, &ldquo;ok&rdquo; och &ldquo;equal&rdquo;. Till &ldquo;ok&rdquo; behöver man bara skicka in ett argument, och om argumentet är &ldquo;true&rdquo; är testet godkänt. Till &ldquo;equal&rdquo; skickar man in två argument, och om de stämmer överens är testet godkänt. I exemplet ovan används en variant på equal som används för att jämföra t.ex. objekt och listor.</p>

<p>Här är ett exempel på ett test av DOM-manipulation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;DOM manipulation&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Item 1&#39;</span><span class="p">,</span> <span class="s1">&#39;Second item&#39;</span><span class="p">,</span> <span class="s1">&#39;Item the 3rd&#39;</span><span class="p">,</span> <span class="s1">&#39;Fourth one&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myList&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&#39;</span><span class="o">+</span><span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myList&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">length</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mocha</h3>

<p>Mocha är klart mer omfattande än QUnit, men har också fler användningsområden. En av de viktigare skillnaderna är att Mocha kan testa javascript utanför en browser, t.ex. i en Node-applikation. Du installerar Mocha via npm, och kör Mocha via terminalen.</p>

<p>I min app.js har jag samma funktion som ovan (&ldquo;multiLineText&rdquo;, fast tillgängliggjord i exports):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">multiLineText</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">myString</span><span class="p">,</span> <span class="nx">maxWidth</span><span class="p">){</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I roten på projektet har jag även skapat en folder som heter &ldquo;test&rdquo;, vilket är den folder Mocha letar efter tester i. Här har jag en fil som heter t.ex. &ldquo;mytest.js&rdquo;, som innehåller själva testet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;assert&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../app&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;multiLineText&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should return correct array&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">multiLineText</span><span class="p">(</span><span class="s1">&#39;I have a thing to say&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">[</span><span class="s1">&#39;I have&#39;</span><span class="p">,</span> <span class="s1">&#39;a thing&#39;</span><span class="p">,</span> <span class="s1">&#39;to say&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sedan kör jag Mocha via terminalen via ett enkelt kommando:</p>

<p>   mocha</p>

<p>Jag får följande resultat att 1 test (av 1 möjliga) är lyckat:</p>

<p>   1 passing (5 ms)</p>

<p>Mocha har många kraftfulla features, som att få Mocha att köra tester automatiskt när kod har uppdaterats, eller att använda andra testbibliotek för att köra testerna (t.ex. Jasmine).</p>

<h2>Exempelapplikation</h2>

<p>Som avslutning tänkte jag visa en liten exempelapplikation, och exempel på hur man kan skriva tester till den. Applikationen skall klara av att visa ett diagram där en andel av ett antal figurer är markerade, t.ex. &ldquo;22 av 30 deltagare&rdquo;. Diagrammet skall vara en SVG-bild.</p>

<h3>Krav- och funktionslista</h3>

<p>För att kunna åstadkomma det här diagrammet behöver vi följande funktioner:</p>

<ul>
<li>En funktion som kan räkna ut antal figurer per rad, baserat på värdet och maxvärdet (t.ex. &ldquo;22&rdquo; och &ldquo;30&rdquo;)</li>
<li>En funktion som ritar ut figurerna.</li>
</ul>


<h3>Test</h3>

<p>Det första testet vi skriver är därför ett test som kontrollerar vår uträkningsfunktion. Vi vet att vi vill kunna skala antal figurer per rad baserat på maxantalet, samt behöver få ut antalet rader, kolumner, och vilka rader som är markerade, och hur många som är markerade per rad.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Get rows, columns and figurenumber&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">deepEqual</span><span class="p">(</span><span class="nx">getChartSize</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rows</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">columns</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastMarkedRow</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">markedAtLastMarkedRow</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastRowLength</span><span class="o">:</span> <span class="mi">5</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">deepEqual</span><span class="p">(</span><span class="nx">getChartSize</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">66</span><span class="p">),</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rows</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">columns</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastMarkedRow</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">markedAtLastMarkedRow</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastRowLength</span><span class="o">:</span> <span class="mi">6</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">deepEqual</span><span class="p">(</span><span class="nx">getChartSize</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">24</span><span class="p">),</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rows</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">columns</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastMarkedRow</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">markedAtLastMarkedRow</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastRowLength</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Det nästa testet är till för att se så att vår DOM-manipulation gör vad vi förväntar oss. I det här fallet kollar jag att det finns rätt antal av &ldquo;märkta&rdquo; respektive &ldquo;omärkta&rdquo; figurer, samt kontrollerar att SVGn har rätt storlek.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Create and manipulate SVG&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Create and manipulate SVG with 7 10&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s1">&#39;http://www.w3.org/2000/svg&#39;</span><span class="p">,</span> <span class="s1">&#39;svg&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;qunit-fixture&#39;</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">svg</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">createChart</span><span class="p">(</span><span class="nx">getChartSize</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="nx">svg</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;svg .marked&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;svg .unmarked&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">svg</span><span class="p">).</span><span class="nx">height</span><span class="p">(),</span> <span class="mi">40</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Create and manipulate SVG with 24 66&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s1">&#39;http://www.w3.org/2000/svg&#39;</span><span class="p">,</span> <span class="s1">&#39;svg&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;qunit-fixture&#39;</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">svg</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">createChart</span><span class="p">(</span><span class="nx">getChartSize</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="mi">66</span><span class="p">),</span> <span class="nx">svg</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;svg .marked&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;svg .unmarked&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">svg</span><span class="p">).</span><span class="nx">height</span><span class="p">(),</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;Create and manipulate SVG with 13 24&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s1">&#39;http://www.w3.org/2000/svg&#39;</span><span class="p">,</span> <span class="s1">&#39;svg&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;qunit-fixture&#39;</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">svg</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">createChart</span><span class="p">(</span><span class="nx">getChartSize</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">24</span><span class="p">),</span> <span class="nx">svg</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;svg .marked&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;svg .unmarked&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">svg</span><span class="p">).</span><span class="nx">height</span><span class="p">(),</span> <span class="mi">30</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Funktion</h3>

<p>Först har vi funktionen som tar fram hur många figurer vi behöver visa:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getChartSize</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">max</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">rows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">columns</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastMarkedRow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">markedAtLastMarkedRow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastRowLength</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">max</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">columns</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">max</span> <span class="o">&lt;=</span> <span class="mi">40</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">columns</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">max</span> <span class="o">&lt;=</span> <span class="mi">140</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">columns</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">columns</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rows</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">max</span> <span class="o">/</span> <span class="nx">columns</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">lastMarkedRow</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">num</span> <span class="o">/</span> <span class="nx">columns</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">markedAtLastMarkedRow</span> <span class="o">=</span> <span class="nx">num</span> <span class="o">%</span> <span class="nx">columns</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">lastRowLength</span> <span class="o">=</span> <span class="nx">columns</span> <span class="o">-</span> <span class="p">((</span><span class="nx">rows</span> <span class="o">*</span> <span class="nx">columns</span><span class="p">)</span> <span class="o">-</span> <span class="nx">max</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rows</span><span class="o">:</span> <span class="nx">rows</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">columns</span><span class="o">:</span> <span class="nx">columns</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastMarkedRow</span><span class="o">:</span> <span class="nx">lastMarkedRow</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">markedAtLastMarkedRow</span><span class="o">:</span> <span class="nx">markedAtLastMarkedRow</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastRowLength</span><span class="o">:</span> <span class="nx">lastRowLength</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sen så har vi funktionen som manipulerar en SVG på förväntat vis:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">createChart</span><span class="p">(</span><span class="nx">settings</span><span class="p">,</span> <span class="nx">svg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">addedElements</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">100</span><span class="o">/</span><span class="nx">settings</span><span class="p">.</span><span class="nx">columns</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">w</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">settings</span><span class="p">.</span><span class="nx">rows</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">settings</span><span class="p">.</span><span class="nx">columns</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">addedElements</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">lastMarkedRow</span> <span class="o">*</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">columns</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">columns</span> <span class="o">-</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">markedAtLastMarkedRow</span><span class="p">)){</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">rect</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s1">&#39;http://www.w3.org/2000/svg&#39;</span><span class="p">,</span> <span class="s1">&#39;rect&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;marked&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nx">w</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="nx">j</span><span class="o">*</span><span class="nx">w</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="nx">i</span><span class="o">*</span><span class="nx">h</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;fill&#39;</span><span class="p">,</span> <span class="s1">&#39;#ff0000&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">svg</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">rect</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">addedElements</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">addedElements</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">columns</span> <span class="o">*</span> <span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">rows</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">lastRowLength</span><span class="p">){</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">rect</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="s1">&#39;http://www.w3.org/2000/svg&#39;</span><span class="p">,</span> <span class="s1">&#39;rect&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;unmarked&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nx">w</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="nx">j</span><span class="o">*</span><span class="nx">w</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="nx">i</span><span class="o">*</span><span class="nx">h</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">rect</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;fill&#39;</span><span class="p">,</span> <span class="s1">&#39;#0000ff&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">svg</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">rect</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">addedElements</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">rows</span><span class="o">*</span><span class="nx">h</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;px&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">columns</span><span class="o">*</span><span class="nx">w</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;px&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jag har kört testerna medan jag skrivit funktionerna, och konstaterat att när testerna klaras av så uppfyller funktionerna de krav jag har, och mycket riktigt är applikationen färdig när alla krav och tester är uppfyllda.</p>
]]></content>
  </entry>
  
</feed>